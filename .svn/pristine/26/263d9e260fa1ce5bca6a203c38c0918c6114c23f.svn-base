package edu.wm.cs.cs301.chaoranwei.ui;

import java.io.IOException;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.AssetFileDescriptor;
import android.media.MediaPlayer;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

/**
 * The class FinishActivity is for the Finish State.
 * The finish state class responsibilities are to display the finish page and informs the user what 
 * happened and how to restart the game, the overall energy consumption and length of path.
 * 
 * @author Chaoran Wei and Nadia Aly 
 *
 */
public class FinishActivity extends Activity{
	private int result;
	private int energy;
	private int steps;
	private String tag = "FinishActivity";
	MediaPlayer player;
	private int hitwall;
	
	/**
	 * Method Name: onCreate:
	 * Tells the user outcome: win/lose, overall energy consumption and path length. If the robot stopped
	 * for lack of energy or if it is broken, allow the user to save maze file for later use. The skill level
	 * is known and internal file name is fixed. Overwrite maze if maze is previously stored at the same skill
	 * level. 
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_finish);
		
		if (savedInstanceState == null) {
		    Bundle extras = getIntent().getExtras();
		    if(extras == null) {
		        result = 0;
		        hitwall = 0;
		        energy = 2500;
		    } else {
		        result = extras.getInt("result");
		        hitwall = extras.getInt("hitwall");
		        energy = extras.getInt("energy");
		    }
		} else {
		    result= savedInstanceState.getInt("result");
		    hitwall= savedInstanceState.getInt("hitwall");
		    energy= savedInstanceState.getInt("energy");
		}
		Log.v(tag, "result is " + Integer.toString(result));
		
		TextView win = (TextView)findViewById(R.id.win);
		win.setText("You won! ");
		
		TextView lose = (TextView)findViewById(R.id.lose);
		lose.setText("You run out of energy! ");
		
		TextView hit = (TextView)findViewById(R.id.hitwall);
		lose.setText("You hit a wall! ");
		if (result == 0) {
			lose.setVisibility(View.INVISIBLE);
			hit.setVisibility(View.INVISIBLE);
			AssetFileDescriptor afd;
			try {
				afd = getAssets().openFd("win.mp3");
				player = new MediaPlayer();
				player.setDataSource(afd.getFileDescriptor(),afd.getStartOffset(),afd.getLength());
				player.prepare();
				player.start();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			Log.v(tag, "playing winning audio ");
		} else if (result == 1 && energy == 0) {
			win.setVisibility(View.INVISIBLE);
			hit.setVisibility(View.INVISIBLE);
			AssetFileDescriptor afd;
			try {
				afd = getAssets().openFd("fail.mp3");
				player = new MediaPlayer();
				player.setDataSource(afd.getFileDescriptor(),afd.getStartOffset(),afd.getLength());
				player.prepare();
				player.start();
			} catch (IOException e) {
				e.printStackTrace();
			}
			Log.v(tag, "playing lost audio ");
		} else if (result == 1 && hitwall == 1) {
			win.setVisibility(View.INVISIBLE);
			lose.setVisibility(View.INVISIBLE);
			AssetFileDescriptor afd;
			try {
				afd = getAssets().openFd("fail.mp3");
				player = new MediaPlayer();
				player.setDataSource(afd.getFileDescriptor(),afd.getStartOffset(),afd.getLength());
				player.prepare();
				player.start();
			} catch (IOException e) {
				e.printStackTrace();
			}
			Log.v(tag, "playing lost audio ");
		}
		
		TextView Energy = (TextView)findViewById(R.id.energy_and_path);
		Energy.setText("Energy consumed: " + Integer.toString(energy) + 
				"\n Path length: 0");
		
		Button save_maze = (Button) findViewById(R.id.save_maze);
	    save_maze.setOnClickListener(new View.OnClickListener() {
	    	/**
	    	 * Method Name: onClick
	    	 * @param v
	    	 * Save the maze to file for later reuse
	    	 */
            public void onClick(View v) {
            	Log.v(tag, "Maze saved! ");
			}
		});
	
	    Button restart = (Button) findViewById(R.id.restart);
	    restart.setOnClickListener(new View.OnClickListener() {
	    	
	    	/**
	    	 * Method name: onClick
	    	 * Pressing the back button returns to State Title
	    	 */
            public void onClick(View v) {
            	Log.v(tag, "restart maze... ");
            	Context activity = getApplicationContext();
            	Intent intent = new Intent(activity, AMazeActivity.class);
            	startActivity(intent);
			}
		});
	
	}
	
	/**
	 * Method: onCreateOptionsMenu- Inflate the menu; this adds items to the action bar if it is present.
	 * @param: menu
	 * @return true
	 */
	@Override 
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.finish, menu);
		return true;
	}

	
	/**
	 * Method: onOptionsItemSelected
	 * @param: MenuItem
	 * @return: true or anOptionItemSelected(item): If the user's action was not recognized invoke the 
	 * superclass to handle it. 
	 * User choose the "Settings" item, show the app settings UI...Handle action bar item clicks here.
	 * The action bar will automatically handle clicks on the Home/Up button, so long as you specify a 
	 * parent activity in AndroidManifest.xml.
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

}
