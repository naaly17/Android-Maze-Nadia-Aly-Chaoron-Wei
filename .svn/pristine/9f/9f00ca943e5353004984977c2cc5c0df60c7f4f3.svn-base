package edu.wm.cs.cs301.chaoranwei.ui;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.util.Log;

/**
 * Class PlayActivity is for the state play. 
 * State Play: is responsible to display the maze and let the user either watch a robot exploring 
 * the maze or allow the user to manually navigate the robot through the maze. Also displays the
 * remaining energy using a ProgressBar. The class needs to provide a feature to toggle visibility 
 * of the map plus functionality to toggle visibility of the solution on the map. 
 * @author nadia aly, Chaoran Wei
 *
 */
@SuppressLint("NewApi")
public class PlayActivity extends Activity {
	private int energy;
	private int steps;
	private int result = 0; //0 is win, 1 is lose
	private String driver;
	private int skill;
	private String perspective;
	private String tag = "PlayActivity";
	private TextView energy_text;
		
	/**
	 * Method name: onCreate
	 * This is the main method in the class. Receives input from users choice on how to display map. If 
	 * no input previously provided will display visible walls with manual driver. Get the skill from the 
	 * Title state, defaults to 0. Also receives input on how to operate driver (manual, curious mouse, 
	 * wizard, wall follower) and operates accordingly. 
	 * Display progress bar with amount of energy the robot driver has to operate. 
	 * Supports the following choices to toggle/visibility:
	 * 1) show the whole maze from top or not (toggle).
	 * 2) show the solution in the maze or not (toggle).
	 * 3) show the currently visible walls or not (toggle)
	 * If in manual exploration mode: screen provides navigation buttons (up, down, left, right). If in
	 *  robot exploration mode: screen provides a start/pause button to start the exploration and a pause 
	 *  the animation
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_play);
		
		if (savedInstanceState == null) {
		    Bundle extras = getIntent().getExtras();
		    if(extras == null) {
		        skill= -1;
		        driver = "Manual";
		        perspective = "Visible walls";
		    } else {
		        skill= extras.getInt("skill");
		        driver = extras.getString("driver");
		        perspective = extras.getString("perspective");
		    }
		} else {
		    skill= savedInstanceState.getInt("skill");
		}
		Log.v(tag, "Got intent. ");
		Log.v(tag, "skill is" + Integer.toString(skill));
		Log.v(tag, "driver is " + driver);
		Log.v(tag, "perspective is " + perspective);
		
		ProgressBar EnergyBar = (ProgressBar) findViewById(R.id.energy_progress);
		EnergyBar.setProgress(2500);
		EnergyBar.setMax(2500);
		Log.v(tag, "Progress bar ");
		energy_text = (TextView) findViewById(R.id.energy_text);
		energy_text.setText(2500 +"/"+2500);
		
		Button visiblewall = (Button) findViewById(R.id.visiblewall);
		visiblewall.setOnClickListener(new View.OnClickListener() {
			/**
			 * execute the action when item is clicked
			 */
	        public void onClick(View v) {
	        	Log.v(tag, "visible wall selected. ");
			}
		});
		Log.v(tag, "visible wall button. ");
		Button solution = (Button) findViewById(R.id.solution);
		solution.setOnClickListener(new View.OnClickListener() {
			/**
			 * execute the action when item is clicked
			 */
	        public void onClick(View v) {
	        	Log.v(tag, "solution selected. ");
			}
		});
		Log.v(tag, "solution button. ");
		Button topdown = (Button) findViewById(R.id.topdown);
		topdown.setOnClickListener(new View.OnClickListener() {
			/**
			 * execute the action when item is clicked
			 */
	        public void onClick(View v) {
	        	Log.v(tag, "top down selected. ");
			}
		});
		Log.v(tag, "top down button. ");
		
		Button start_driver = (Button) findViewById(R.id.start_driver);
		start_driver.setOnClickListener(new View.OnClickListener() {
			/**
			 * execute the action when item is clicked
			 */
	        public void onClick(View v) {
	        Log.v(tag, "driver started. ");
			}
		});
		Log.v(tag, "start driver. ");
		Button pause = (Button) findViewById(R.id.pause);
		pause.setOnClickListener(new View.OnClickListener() {
			/**
			 * execute the action when item is clicked
			 */
	        public void onClick(View v) {
	        	Log.v(tag, "driver paused. ");
			}
		});
		Log.v(tag, "pause ");
		
		Button up = (Button) findViewById(R.id.Up);
		up.setOnClickListener(new View.OnClickListener() {
			/**
			 * execute the action when item is clicked
			 */
	        public void onClick(View v) {
	        	Log.v(tag, "Going up button is pressed. ");
			}
		});
		Log.v(tag, "Go up. ");
		Button down = (Button) findViewById(R.id.Down);
		down.setOnClickListener(new View.OnClickListener() {
			/**
			 * execute the action when item is clicked
			 */
	        public void onClick(View v) {
	        	Log.v(tag, "Going down button is pressed. ");
			}
		});
		Log.v(tag, "Go down. ");
		Button left = (Button) findViewById(R.id.Left);
		left.setOnClickListener(new View.OnClickListener() {
			/**
			 * execute the action when item is clicked
			 */
	        public void onClick(View v) {
	        Log.v(tag, "Going left button is pressed. ");
			}
		});
		Log.v(tag, "Go left. ");
		Button right = (Button) findViewById(R.id.Right);
		right.setOnClickListener(new View.OnClickListener() {
			/**
			 * execute the action when item is clicked
			 */
	        public void onClick(View v) {
	        	Log.v(tag, "Going right button is pressed. ");
			}
		});
		Log.v(tag, "Go right. ");
	    if (!driver.equals("Manual")) {
	    	//Log.v(tag, driver);
	    	up.setVisibility(View.INVISIBLE);
	    	down.setVisibility(View.INVISIBLE);
	    	right.setVisibility(View.INVISIBLE);
	    	left.setVisibility(View.INVISIBLE);
	    } else {
	    	start_driver.setVisibility(View.INVISIBLE);
	    	pause.setVisibility(View.INVISIBLE);
	    }
	    
	    Button restartFromPlay = (Button) findViewById(R.id.restartFromPlay);
	    restartFromPlay.setOnClickListener(new View.OnClickListener() {
	    	
	    	/**
	    	 *  method name: onClick
	    	 * Pressing the back button returns to State Title to allow the user to choose different
			 * parameter settings and restart.
	    	 */
	        public void onClick(View v) {
	        	Context activity = getApplicationContext();
            	Intent intent = new Intent(activity, AMazeActivity.class);
            	Log.v(tag, "restart game. ");
            	startActivity(intent);
			}
		});
	    Log.v(tag, "restart button. ");
	    Button shortCut = (Button) findViewById(R.id.shortCut);
	    shortCut.setOnClickListener(new View.OnClickListener() {
	    	
	    	/**
	    	 * method name: onClick 
	    	 * Navigation: If the robot wins, switches to the finish screen.
	    	 */
	        public void onClick(View v) {
	        	Context activity = getApplicationContext();
            	Intent intent = new Intent(activity, FinishActivity.class);
            	Log.v(tag, "going to winning page. ");
            	startActivity(intent);
			}
		});
	    Log.v(tag, "shortcut button. win. ");
	    
	    Button shortCut_lose = (Button) findViewById(R.id.shortCut_lose);
	    shortCut_lose.setOnClickListener(new View.OnClickListener() {
	    	
	    	 /**
		     * Method onClick: 
		     * @param view
		     * As an intermediate step only for this project introduce a Button "Shortcut" to directly
	    	 * move the UI to State Finish 
		     */
	        public void onClick(View v) {
	        	Context activity = getApplicationContext();
            	Intent intent = new Intent(activity, FinishActivity.class);
            	intent.putExtra("result" , 1);
            	intent.putExtra("hitwall" , 0);
            	intent.putExtra("energy" , 0);
            	Log.v(tag, "going to lose page. ");
            	startActivity(intent);
			}
		});
	    Log.v(tag, "shortcut button. lose. ");
	    
	    Button shortCut_lose_hit = (Button) findViewById(R.id.shortCut_lose_hit);
	    shortCut_lose_hit.setOnClickListener(new View.OnClickListener() {
	    	
	    	 /**
		     * Method onClick: 
		     * @param view
		     * As an intermediate step only for this project introduce a Button "Shortcut" to directly
	    	 * move the UI to State Finish 
		     */
	        public void onClick(View v) {
	        	Context activity = getApplicationContext();
            	Intent intent = new Intent(activity, FinishActivity.class);
            	intent.putExtra("result" , 1);
            	intent.putExtra("hitwall" , 1);
            	intent.putExtra("energy" , 2500);
            	Log.v(tag, "going to lose page. ");
            	startActivity(intent);
			}
		});
	    Log.v(tag, "shortcut button. lose. ");
	}

	/**
	 * Method: onCreateOptionsMenu- Inflate the menu; this adds items to the action bar if it is present.
	 * @param: menu
	 * @return true
	 */
	@Override 
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.play, menu);
		return true;
	}

	/**
	 * Method: onOptionsItemSelected
	 * @param: MenuItem
	 * @return: true or anOptionItemSelected(item): If the user's action was not recognized invoke the 
	 * superclass to handle it. 
	 * User choose the "Settings" item, show the app settings UI...Handle action bar item clicks here.
	 * The action bar will automatically handle clicks on the Home/Up button, so long as you specify a 
	 * parent activity in AndroidManifest.xml.
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		switch (id) {
        case R.id.action_settings:
            // User chose the "Settings" item, show the app settings UI...
            return true;

        default:
            // If we got here, the user's action was not recognized.
            // Invoke the superclass to handle it.
            return super.onOptionsItemSelected(item);
		}

    }
}
